"""
Convert numbers from base 10 integers to base X strings and back again.

Sample usage:
  >>> base20 = BaseConverter('0123456789abcdefghij')
  >>> base20.encode(1234)
  '31e'
  >>> base20.decode('31e')
  1234
  >>> base20.encode(-1234)
  '-31e'
  >>> base20.decode('-31e')
  -1234
  >>> base11 = BaseConverter('0123456789a', '-.')
  >>> base11.encode(-1234)
  '-a22'
  >>> base11.decode('-a22')
  -1234
"""

import string
from typing import Any, Tuple, Union

BASE2_ALPHABET = "01"
BASE16_ALPHABET = "0123456789ABCDEF"
BASE36_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz"
BASE56_ALPHABET = "23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz"
BASE62_ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
BASE64_ALPHABET = string.ascii_uppercase + string.ascii_lowercase + string.digits + "+/"


class BaseConverter:
    decimal_digits = "0123456789"

    def __init__(self, digits: str, sign: str = "-") -> None:
        """Initialize with a string of digits."""
        self.digits = digits
        self.sign = sign

    def encode(self, i: int) -> str:
        """Convert an integer to a string in the given base."""
        neg, value = self.convert(i, self.decimal_digits, self.digits, self.sign)
        if neg:
            return self.sign + value
        return value

    def decode(self, s: str) -> int:
        """Convert a string in the given base to an integer."""
        neg, value = self.convert(s, self.digits, self.decimal_digits, self.sign)
        if neg:
            return -value
        return value

    def convert(
        self, number: Union[int, str], from_digits: str, to_digits: str, sign: str
    ) -> Tuple[bool, int]:
        """Convert a number between two bases of arbitrary digits."""
        if not isinstance(number, str):
            # Convert to a string in the "from" base
            number = str(number)

        # Strip the sign (if any) and remember if it's negative
        neg = number.startswith(sign)
        if neg:
            number = number[len(sign):]

        # Make sure the number is valid in the given base
        if any(c not in from_digits for c in number):
            raise ValueError(f"Invalid digit in number '{number}' for base {len(from_digits)}")

        # Convert to an integer in base 10
        x = 0
        for i, c in enumerate(reversed(number)):
            x += from_digits.index(c) * (len(from_digits) ** i)

        # Convert to a string in the "to" base
        if x == 0:
            return neg, to_digits[0]

        res = ""
        while x > 0:
            digit = x % len(to_digits)
            res = to_digits[digit] + res
            x //= len(to_digits)

        return neg, res


base2 = BaseConverter(BASE2_ALPHABET)
base16 = BaseConverter(BASE16_ALPHABET)
base36 = BaseConverter(BASE36_ALPHABET)
base56 = BaseConverter(BASE56_ALPHABET)
base62 = BaseConverter(BASE62_ALPHABET)
base64 = BaseConverter(BASE64_ALPHABET)